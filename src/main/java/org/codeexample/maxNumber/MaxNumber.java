package org.codeexample.maxNumber;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import org.codeexample.common.OverflowException;
import org.codeexample.common.Utils;
class MyComparator implements Comparator<Integer> {
	
	
	/**
	 * For input 87 and 8, it would return -1, for 89 and 8, return 1, for 88
	 * and 8, return 0.
	 */
	public int compare(Integer int1, Integer int2) {
		if (int1 == null)
			return -1;
		if (int2 == null)
			return 1;
		// if eqauls, return directly to improve efficiency.
		if (int1.equals(int2))
			return 0;
		int int1DigitNumber = Utils.getNumberOfDigits(int1), int2DigitNumber = Utils
				.getNumberOfDigits(int2);
		if (int1DigitNumber > int2DigitNumber) {
			int2 = Utils.rightPadNumber(int2,
					int1DigitNumber);
		} else if (int1DigitNumber < int2DigitNumber) {
			int1 = Utils.rightPadNumber(int1,
					int2DigitNumber);
		}
		return int1.compareTo(int2);
	}
}
public class MaxNumber {
	/**
	 * @see org.codeexample.maxNumber#maxNumber(java.util.List)
	 */
	public static int maxNumber(int[] ia)
			throws IllegalArgumentException,
			OverflowException {
		return maxNumber(Utils.toList(ia));
	}
	/**
	 * @param la,
	 *            a list of positive Integer numbers
	 * @return the max value that is generated by concatting each Integer value<br>
	 *         For example, for input 8, 87, 89, it would return 89887
	 * @throws IllegalArgumentException,
	 *             if the parameters include negative number
	 * @throws OverflowException,
	 *             if the generated number would be larger than
	 *             Integer.MAX_VALUE
	 */
	public static int maxNumber(List<Integer> la)
			throws IllegalArgumentException,
			OverflowException {
		Collections.sort(la, new MyComparator());
		Collections.reverse(la);
		Iterator<Integer> iterator = la.iterator();
		int result = 0;
		while (iterator.hasNext()) {
			int tmpi = iterator.next();
			if (tmpi < 0) {
				throw new IllegalArgumentException(
						"The list contains negative number: "
								+ tmpi);
			}
			int digitNumber = Utils.getNumberOfDigits(tmpi);
			// result = (10^digitNumber)*result + tmpi;
			result = Utils.safeMultiply(new Double(Math
					.pow(10, digitNumber)).intValue(),
					result);
			result = Utils.safeAdd(result, tmpi);
		}
		return result;
	}
}
